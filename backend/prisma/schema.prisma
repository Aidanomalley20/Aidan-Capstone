generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  firstName      String    @default("")
  lastName       String    @default("")
  username       String    @unique
  email          String    @unique
  phone          String    @default("")
  password       String
  bio            String?
  profilePicture String?
  posts          Post[]
  likes          Like[]
  comments       Comment[]
  followers      Follow[]  @relation("FollowerRelations")
  following      Follow[]  @relation("FollowingRelations")

  // Messages
  sentMessages     Message[] @relation("SenderRelation")
  receivedMessages Message[] @relation("ReceiverRelation")

  // Notifications
  sentNotifications     Notification[] @relation("SenderNotificationRelation")
  receivedNotifications Notification[] @relation("RecipientNotificationRelation")

  createdAt DateTime @default(now())
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  content   String
  image     String?
  likes     Like[]
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User     @relation("FollowerRelations", fields: [followerId], references: [id])
  following   User     @relation("FollowingRelations", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String
  postId    Int
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  sender     User     @relation(fields: [senderId], references: [id], name: "SenderRelation")
  receiver   User     @relation(fields: [receiverId], references: [id], name: "ReceiverRelation")
  content    String
  createdAt  DateTime @default(now())
}

model Notification {
  id          Int      @id @default(autoincrement())
  recipientId Int
  senderId    Int?
  type        String // "like", "follow"
  postId      Int? // Optional for "like" notifications
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  recipient User  @relation(fields: [recipientId], references: [id], name: "RecipientNotificationRelation")
  sender    User? @relation(fields: [senderId], references: [id], name: "SenderNotificationRelation")
}
